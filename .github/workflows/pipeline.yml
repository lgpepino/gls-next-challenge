name: Python APP workflow

on:
    #The flow will be execute every time we do a push to the main and develop branches
    push:
        branches: [ main, develop ]

jobs:
    build:
        #The image in use to execute the jobs is Ubuntu
        runs-on: ubuntu-latest
        name: Build the python application

        steps:
            - 
                #Checkout the code from the current repository 
                uses: actions/checkout@v4.1.7
            -
                #Authenticating in Dockerhub to push the image built in this Job 
                name: Login to Docker Hub
                uses: docker/login-action@v3.3.0
                with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}    
            - 
                #Building the application and creating a docker container with the app
                name: Build and push
                uses: docker/build-push-action@v6.7.0
                with: 
                  context: .
                  push: true
                  #The below line will be used when HELM releases is in place to deploy the images with the tag of the commit SHA
                  #tags: lgpepino/generic-images:my-python-app-${{ github.sha }}
                  tags: lgpepino/generic-images:my-python-app-latest
                  file: ./Dockerfile
    deploy:
        needs: build 
        runs-on: ubuntu-latest
        name: Deploy the application to Cloud Minikube

        steps:
            - 
                #Checkout the code from the current repository 
                uses: actions/checkout@v4.1.7
            - 
                #Create a temporary instance from minikube to test the deploy of the application
                name: Start minikube
                uses: medyagh/setup-minikube@latest
            - 
                #Check if the minikube is running
                name: Try the cluster!
                run: kubectl get pods -A
            - 
                #Executing the deploy of the application using kubectl
                #Since it's a temporary cluster, the namespace need to be created
                #Using kuctlapply we deploy the manifest to create the application and the service in the dev namespace
                #The kubectl wait will release the terminal when the condintion is achieved
                name: Deploy to minikube
                run: 
                    kubectl create namespace dev &&
                    kubectl apply -f kubernetes-manifests/python-app.yaml --namespace dev &&
                    kubectl wait --for=condition=ready pod -l app=python-app --namespace dev
            - 
                #Checking if the service from python app where created in cluster
                name: Test service URLs
                run: |
                    minikube service list
                    minikube service python-app --url --namespace dev
            -   
                #This step perform a check, to ensure the application is running
                #In the first line the code collect how many lines we have with pods in the running state
                #In the second line, if the number of the pods is different from 3, the script will exit with a retrun 1, and it will fail the pipeline
                name: Check if application is running
                run: |
                    check=$(kubectl get pods --namespace dev | awk '{ print $3 }' | grep -i Running | wc -l)
                    if [[ "$check" -eq 3 ]]; then echo "APP is healty"; else exit 1; fi